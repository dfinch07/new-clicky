{"version":3,"sources":["components/Navbar/Navbar.js","components/Header/Header.js","components/Item/Item.js","components/Footer/Footer.js","pages/Game/Game.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","messageClass","message","score","topscore","Header","Item","_ref","name","image","onClick","src","alt","Footer","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topScore","maxScore","characters","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","handleCorrectSelection","setState","handleResetWin","currentCharacters","map","ch","objectSpread","isClicked","handleIncorrectSelection","handleShuffleChararcters","resetNeeded","handleRenderCharacters","character","components_Item_Item","key","id","bind","assertThisInitialized","components_Navbar_Navbar","components_Header_Header","components_Footer_Footer","Component","ReactDOM","render","BrowserRouter","basename","process","App_App","document","getElementById","App","Route","exact","path","pages_Game_Game","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","src_App_0","URL","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.381d731c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = (props) => (\n  <nav className=\"navbar\">\n    <ul>\n      <li className=\"brand\">\n        <a href=\"/\">Family Matters Click Game</a>\n      </li>\n      <li className={props.messageClass}>{props.message}</li>\n      <li>Score: {props.score} | Top Score: {props.topscore}</li></ul>\n  </nav>\n\n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = () => (\n   <header className=\"header\">\n   \t<h1>The Family matters Click Game!</h1>\n   \t<h2>Click on an image to earn points, but don't click on any more than once!</h2>\n   </header>\n);\nexport default Header;","import React from 'react';\nimport \"./Item.css\";\n\nconst Item = ({name, image, onClick}) =>\n\t\t\t<img \n\t\t\t\tclassName=\"click-item\"\n\t\t\t\tsrc={image}\n\t\t\t\talt={name}\n\t\t\t\tname={name}\n\t\t\t\tonClick={ () => onClick(name) }\n\t\t\t/>;\n\nexport default Item;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n\t<footer className=\"footer\">\n\t\t<div className=\"footer-bottom\">\n\t\t\tClick Game! \n\t\t\t<img alt=\"react\" src=\"assets/images/react.svg\"/>\n\t\t</div>\n\t</footer>\n\n);\n\nexport default Footer;","import React, { Component } from 'react';\r\nimport Navbar from '../../components/Navbar';\r\nimport Header from '../../components/Header';\r\nimport Item from '../../components/Item';\r\nimport Footer from '../../components/Footer';\r\nimport characters from \"../../characters.json\";\r\n\r\nclass Game extends Component {\r\n  // Setting the initial state of the App component\r\n  constructor(){\r\n    super()\r\n\r\n    this.handleShuffleChararcters = this.handleShuffleChararcters.bind(this)\r\n  }\r\n\r\n  state = {\r\n    score: 0,\r\n    topScore: 0,\r\n    maxScore: 12,\r\n    message: \"Click an image to begin!\",\r\n    messageClass: \"\",\r\n    characters: characters\r\n  };\r\n\r\n  shuffle = (array) => {\r\n    let currentIndex = array.length;\r\n    let temporaryValue;\r\n    let randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  handleCorrectSelection = () => {\r\n    \r\n    if (this.state.score+1 > this.state.topScore) {\r\n      this.setState({topScore: this.state.topScore+1})\r\n    }\r\n    if (this.state.score+1 === this.state.maxScore) {\r\n      this.setState({score: this.state.score+1, message: \"Congrats! You win!\", messageClass:\"correct\"})\r\n    }else{\r\n      this.setState({score: this.state.score+1, message: \"You guessed correctly!\", messageClass:\"correct\"})\r\n    }\r\n  }\r\n\r\n  handleResetWin = (currentCharacters) => {\r\n    //if current score is at max reset score to 0 and topscore to 0\r\n    if (this.state.score+1 === this.state.maxScore) {\r\n      this.setState({score: 0, topScore: 0})\r\n      //reset clicked state for characters\r\n      const updatedCharacters = currentCharacters.map(ch => (true) ? { ...ch, isClicked: false } : ch)\r\n      return updatedCharacters\r\n    }else{\r\n      return currentCharacters\r\n    }\r\n  }\r\n\r\n  handleIncorrectSelection = () => {\r\n    //incorrect selection made, reset score to 0\r\n    this.setState({score: 0, message: \"You guessed incorrectly!\"})\r\n    //reset clicked state for characters\r\n    const updatedCharacters = this.state.characters.map(ch => ch.isClicked === true ? { ...ch, isClicked: false } : ch)\r\n    return updatedCharacters\r\n  }\r\n\r\n\r\n  handleShuffleChararcters = (name) => {\r\n    // this.handleResetWin();\r\n    var resetNeeded = false;\r\n    const characters = this.state.characters.map(ch => {\r\n      //ch.name === name ? { ...ch, isClicked: true } : ch\r\n      if(ch.name === name) {\r\n        if (ch.isClicked === false) {\r\n          this.handleCorrectSelection()\r\n          return { ...ch, isClicked: true}\r\n        }else{\r\n          resetNeeded = true\r\n          return { ...ch, isClicked: false}\r\n        }\r\n      }\r\n      return ch\r\n    })\r\n\r\n    if (resetNeeded) {\r\n      this.setState({\r\n        characters: this.shuffle(this.handleIncorrectSelection()),\r\n        messageClass:\"incorrect\"\r\n      })\r\n      \r\n    }else{\r\n      //check if game is won before rendering characters\r\n      this.setState({ characters: this.shuffle(this.handleResetWin(characters)) })\r\n    }\r\n    \r\n  }\r\n\r\n  handleRenderCharacters = () => {\r\n    return this.state.characters.map((character) =>\r\n            <Item \r\n              image={character.image} \r\n              name={character.name} \r\n              key={character.id} \r\n              onClick={this.handleShuffleChararcters} \r\n            />\r\n          );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Game\">\r\n        <Navbar\r\n          score={this.state.score}\r\n          topscore={this.state.topScore}\r\n          message={this.state.message}\r\n          messageClass={this.state.messageClass}\r\n        />\r\n        <Header />\r\n        <div className=\"content\">\r\n          {this.handleRenderCharacters()}\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Game from './pages/Game';\nimport './App.css';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\n\nclass App extends Component {\n\n  render() {\n    return (\n        <Route exact path={'/'} render={ <Game /> } />\n    );\n  }\n}\n\nexport default App;","\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}><App /></Router>, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}